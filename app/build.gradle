apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

def versionMajor = 0
def versionMinor = 20
def versionPatch = 1

def formattedVersionCode = (versionMajor * 10000 + versionMinor * 100 + versionPatch).toString()
def formattedVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

def DEV_PROPERTIES_FILE = file("../project.properties")
def CI_PROPERTIES_FILE = file("../ci.properties")

def PROPERTY_KEYSTORE_PASSWORD = 'KEYSTORE_PASSWORD'
def PROPERTY_KEYSTORE_ALIAS = 'KEYSTORE_ALIAS'

project.ext.customProps = new Properties()
if (DEV_PROPERTIES_FILE.exists()) {
    project.ext.customProps.load(new FileInputStream(DEV_PROPERTIES_FILE))
}
if (CI_PROPERTIES_FILE.exists()) {
    project.ext.customProps.load(new FileInputStream(CI_PROPERTIES_FILE))
}

String getCustomProperty(String key) {
    return project.ext.customProps[key] ?: System.getenv(key) ?: ""
}

task generateVersionPropertiesFile {
    // This task is need only for F-Droid
    def PROPERTY_VERSION_CODE = "versionCode"
    def PROPERTY_VERSION_NAME = "versionName"
    def VERSION_PROPERTIES_FILE = file("../version.properties")

    def versions = new Properties()
    if (VERSION_PROPERTIES_FILE.exists()) {
        versions.load(new FileInputStream(VERSION_PROPERTIES_FILE))
    }

    if (versions[PROPERTY_VERSION_CODE] != formattedVersionCode
            || versions[PROPERTY_VERSION_NAME] != formattedVersionName) {
        project.logger.lifecycle("Updating file: version.properties")

        versions.setProperty(PROPERTY_VERSION_CODE, formattedVersionCode)
        versions.setProperty(PROPERTY_VERSION_NAME, formattedVersionName)

        versions.store(new BufferedWriter(new FileWriter(VERSION_PROPERTIES_FILE)),
                "The content of this file is generated automatically for F-Droid")
    }
}

android {
    def ext = rootProject.extensions.ext

    compileSdkVersion ext.android.compileSdk

    defaultConfig {
        applicationId 'com.ivanovsky.passnotes'
        minSdkVersion ext.android.minSdk
        targetSdkVersion ext.android.targetSdk
        versionCode formattedVersionCode.toInteger()
        versionName formattedVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary true
        multiDexEnabled true

        project.logger.lifecycle("VersionName: $versionName")
        project.logger.lifecycle("VersionCode: $versionCode")
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.assets.srcDirs += 'schemas'
        test.java.srcDirs += 'src/test/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    signingConfigs {
        debug {
            storeFile file("../keys/debug.keystore")
        }
        release {
            storeFile file("../keys/release.keystore")
            storePassword getCustomProperty(PROPERTY_KEYSTORE_PASSWORD) ?: ""
            keyAlias getCustomProperty(PROPERTY_KEYSTORE_ALIAS) ?: ""
            keyPassword getCustomProperty(PROPERTY_KEYSTORE_PASSWORD) ?: ""
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            versionNameSuffix 'd'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    preBuild.dependsOn(generateVersionPropertiesFile)
}

def koinVersion = '2.0.1'
def roomVersion = '2.4.2'
def lifecycleVersion = '2.2.0'
def androidXVersion = '1.2.0'

def annimonStreamApiVersion = '1.1.4'
def okHttpVersion = '4.9.1'
def apacheCommonsLangVersion = '3.0'
def sardineAndroidVersion = 'v0.8'
def ciceroneVersion = '7.0'
def timberVersion = '5.0.1'
def treessenceVersion = "1.0.5"

// Test
def jUnitVersion = '4.13'
def robolectricVersion = '4.9'
def androidXRulesVersion = '1.4.0'
def androidXJunitVersion = '1.1.3'
def mockkVersion = '1.11.0'
def truthVersion = '1.1.3'
def androidXArchVersion = '2.1.0'
def androidXCoreVersion = '1.2.0'
def roomTesting = '2.4.2'

dependencies {
    // Test dependencies
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "androidx.arch.core:core-testing:$androidXArchVersion"
    testImplementation "androidx.test:core:$androidXCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"

    // Android test dependencies
    androidTestImplementation "androidx.test.ext:junit:$androidXJunitVersion"
    androidTestImplementation "androidx.test:rules:$androidXRulesVersion"
    androidTestImplementation "androidx.room:room-testing:$roomTesting"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // MultiDex
    implementation "androidx.multidex:multidex:2.0.1"

    // DI
    implementation "io.insert-koin:koin-android:$koinVersion"
    implementation "io.insert-koin:koin-core:$koinVersion"
    implementation "io.insert-koin:koin-androidx-viewmodel:$koinVersion"

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // Lifecycle libraries
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"

    // AndroidX libraries
    implementation "androidx.appcompat:appcompat:$androidXVersion"
    implementation "com.google.android.material:material:$androidXVersion"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.biometric:biometric-ktx:1.2.0-alpha05"

    // Android KTX
    implementation "androidx.core:core-ktx:1.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-core-ktx:$lifecycleVersion"
    implementation "androidx.activity:activity-ktx:1.1.0"

    // Java stream API
    implementation "com.annimon:stream:$annimonStreamApiVersion"

    //Apache Commons Lang
    implementation "org.apache.commons:commons-lang3:$apacheCommonsLangVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    // WebDAV client
    implementation "com.github.thegrizzlylabs:sardine-android:$sardineAndroidVersion"

    //Cicerone
    implementation "com.github.terrakok:cicerone:$ciceroneVersion"

    // Timber
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.github.bastienpaulfr:Treessence:$treessenceVersion"

    // JGit
    implementation "org.eclipse.jgit:org.eclipse.jgit:6.2.0.202206071550-r"

    // KeePassJava2
    implementation "com.github.aivanovski:KeePassJava2-android:2.1.4"

    // Kotpass
    implementation "com.github.anvell:kotpass:0.4.10"

    // Fuzzy search
    implementation "me.xdrop:fuzzywuzzy:1.4.0"
}
